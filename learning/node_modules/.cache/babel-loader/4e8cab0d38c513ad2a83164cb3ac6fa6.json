{"ast":null,"code":"/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db');\n\nvar extname = function extname(path) {\n  if (!path || path.indexOf('.') === -1) {\n    return '';\n  }\n\n  path = '.' + path.split('.').pop().toLowerCase();\n  return /.*(\\..*)/g.exec(path)[1] || '';\n};\n/**\n * Module variables.\n * @private\n */\n\n\nvar extractTypeRegExp = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar textTypeRegExp = /^text\\//i;\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset;\nexports.charsets = {\n  lookup: charset\n};\nexports.contentType = contentType;\nexports.extension = extension;\nexports.extensions = Object.create(null);\nexports.lookup = lookup;\nexports.types = Object.create(null); // Populate the extensions/types maps\n\npopulateMaps(exports.extensions, exports.types);\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  } // TODO: use media-typer\n\n\n  var match = extractTypeRegExp.exec(type);\n  var mime = match && db[match[1].toLowerCase()];\n\n  if (mime && mime.charset) {\n    return mime.charset;\n  } // default text/* to utf-8\n\n\n  if (match && textTypeRegExp.test(match[1])) {\n    return 'UTF-8';\n  }\n\n  return false;\n}\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\n\nfunction contentType(str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false;\n  }\n\n  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;\n\n  if (!mime) {\n    return false;\n  } // TODO: use content-type or other module\n\n\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime);\n    if (charset) mime += '; charset=' + charset.toLowerCase();\n  }\n\n  return mime;\n}\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\n\nfunction extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  } // TODO: use media-typer\n\n\n  var match = extractTypeRegExp.exec(type); // get extensions\n\n  var exts = match && exports.extensions[match[1].toLowerCase()];\n\n  if (!exts || !exts.length) {\n    return false;\n  }\n\n  return exts[0];\n}\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\n\nfunction lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false;\n  } // get the extension (\"ext\" or \".ext\" or full path)\n\n\n  var extension = extname('x.' + path).toLowerCase().substr(1);\n\n  if (!extension) {\n    return false;\n  }\n\n  return exports.types[extension] || false;\n}\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\n\nfunction populateMaps(extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana'];\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type];\n    var exts = mime.extensions;\n\n    if (!exts || !exts.length) {\n      return;\n    } // mime -> extensions\n\n\n    extensions[type] = exts; // extension -> mime\n\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i];\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source);\n        var to = preference.indexOf(mime.source);\n\n        if (types[extension] !== 'application/octet-stream' && from > to || from === to && types[extension].substr(0, 12) === 'application/') {\n          // skip the remapping\n          continue;\n        }\n      } // set the extension -> mime\n\n\n      types[extension] = type;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/michalratajewski/edupage/files/learning/node_modules/react-native-mime-types/index.js"],"names":["db","require","extname","path","indexOf","split","pop","toLowerCase","exec","extractTypeRegExp","textTypeRegExp","exports","charset","charsets","lookup","contentType","extension","extensions","Object","create","types","populateMaps","type","match","mime","test","str","exts","length","substr","preference","undefined","keys","forEach","forEachMimeType","i","from","source","to"],"mappings":"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","sourcesContent":["/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\n\nconst extname = function(path) {\n  if (!path || path.indexOf('.') === -1) { return '' }\n  path = '.' + path.split('.').pop().toLowerCase()\n  return /.*(\\..*)/g.exec(path)[1] || ''\n}\n\n/**\n * Module variables.\n * @private\n */\n\nvar extractTypeRegExp = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar textTypeRegExp = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = extractTypeRegExp.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && textTypeRegExp.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = extractTypeRegExp.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}