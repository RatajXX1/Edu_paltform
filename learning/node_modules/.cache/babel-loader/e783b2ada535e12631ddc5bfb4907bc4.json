{"ast":null,"code":"import crypto from \"./crypto\";\nexport default {\n  async authorize(login_input, password_input) {\n    try {\n      password_input = await crypto.sha256(password_input);\n      const resp = await fetch('http://192.168.0.7:8080/api/auth/login.php', {\n        method: 'POST',\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          login: login_input,\n          password: password_input,\n          Auto_login: false\n        }),\n        credentials: 'include'\n      }).then(data => data.json()).catch(null);\n\n      if (resp !== null) {\n        if (resp[\"CODE\"] === 'OK') {\n          window.sessionStorage.setItem('Token', resp['Token']);\n          return true;\n        } else {\n          return false;\n        }\n      } else return false;\n    } catch (e) {\n      return false;\n    }\n  },\n\n  async CheckAuthorize() {\n    try {\n      const resp = await fetch('http://192.168.0.7:8080/api/auth/authorize.php', {\n        method: 'GET',\n        headers: {\n          'Access-Control-Allow-Origin': '*'\n        },\n        credentials: 'include'\n      }).then(data => data.json()).catch(null);\n\n      if (resp !== null) {\n        if (resp['CODE'] === 'OK') {\n          return resp['DATA'];\n        } else return null;\n      } else return null;\n    } catch (e) {\n      return null;\n    }\n  },\n\n  isAuthorized(AuthorizedState) {\n    if (!AuthorizedState) {\n      if (window.location.pathname !== '/') window.location.href = '/';\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/michalratajewski/edupage/files/learning/src/utilis/authorize.js"],"names":["crypto","authorize","login_input","password_input","sha256","resp","fetch","method","headers","body","JSON","stringify","login","password","Auto_login","credentials","then","data","json","catch","window","sessionStorage","setItem","e","CheckAuthorize","isAuthorized","AuthorizedState","location","pathname","href"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,eAAe;AAEX,QAAMC,SAAN,CAAgBC,WAAhB,EAA6BC,cAA7B,EAA6C;AACzC,QAAI;AACAA,MAAAA,cAAc,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAcD,cAAd,CAAvB;AACA,YAAME,IAAI,GAAG,MAAMC,KAAK,CAAC,4CAAD,EAA+C;AACnEC,QAAAA,MAAM,EAAE,MAD2D;AAEnEC,QAAAA,OAAO,EAAE;AACL,yCAA8B,GADzB;AAEL,0BAAgB;AAFX,SAF0D;AAMnEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,UAAAA,KAAK,EAAEV,WADU;AAEjBW,UAAAA,QAAQ,EAAEV,cAFO;AAGjBW,UAAAA,UAAU,EAAE;AAHK,SAAf,CAN6D;AAWnEC,QAAAA,WAAW,EAAE;AAXsD,OAA/C,CAAL,CAYhBC,IAZgB,CAYXC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAZG,EAYUC,KAZV,CAYgB,IAZhB,CAAnB;;AAcA,UAAId,IAAI,KAAK,IAAb,EAAmB;AACf,YAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiB,IAArB,EAA2B;AACvBe,UAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,EAAuCjB,IAAI,CAAC,OAAD,CAA3C;AACA,iBAAO,IAAP;AACH,SAHD,MAGO;AACH,iBAAO,KAAP;AACH;AACJ,OAPD,MAOO,OAAO,KAAP;AACV,KAxBD,CAwBE,OAAOkB,CAAP,EAAU;AACR,aAAO,KAAP;AACH;AACJ,GA9BU;;AAgCX,QAAMC,cAAN,GAAuB;AACnB,QAAI;AACA,YAAMnB,IAAI,GAAG,MAAMC,KAAK,CAAC,gDAAD,EAAmD;AACvEC,QAAAA,MAAM,EAAE,KAD+D;AAEvEC,QAAAA,OAAO,EAAE;AACL,yCAA8B;AADzB,SAF8D;AAKvEO,QAAAA,WAAW,EAAE;AAL0D,OAAnD,CAAL,CAMhBC,IANgB,CAMXC,IAAI,IAAIA,IAAI,CAACC,IAAL,EANG,EAMUC,KANV,CAMgB,IANhB,CAAnB;;AAOA,UAAId,IAAI,KAAK,IAAb,EAAmB;AACf,YAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiB,IAArB,EAA2B;AACvB,iBAAOA,IAAI,CAAC,MAAD,CAAX;AACH,SAFD,MAEO,OAAO,IAAP;AACV,OAJD,MAIO,OAAO,IAAP;AACV,KAbD,CAaE,OAAOkB,CAAP,EAAU;AACR,aAAO,IAAP;AACH;AACJ,GAjDU;;AAmDXE,EAAAA,YAAY,CAACC,eAAD,EAAkB;AAC1B,QAAI,CAACA,eAAL,EAAsB;AAClB,UAAIN,MAAM,CAACO,QAAP,CAAgBC,QAAhB,KAA6B,GAAjC,EAAsCR,MAAM,CAACO,QAAP,CAAgBE,IAAhB,GAAuB,GAAvB;AACzC;AACJ;;AAvDU,CAAf","sourcesContent":["import crypto from \"./crypto\";\n\nexport default {\n\n    async authorize(login_input, password_input) {\n        try {\n            password_input = await crypto.sha256(password_input)\n            const resp = await fetch('http://192.168.0.7:8080/api/auth/login.php', {\n                method: 'POST',\n                headers: {\n                    'Access-Control-Allow-Origin':'*',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    login: login_input,\n                    password: password_input,\n                    Auto_login: false\n                }),\n                credentials: 'include'\n            }).then(data => data.json()).catch(null)\n\n            if (resp !== null) {\n                if (resp[\"CODE\"] === 'OK') {\n                    window.sessionStorage.setItem('Token', resp['Token'])\n                    return true\n                } else {\n                    return false\n                }\n            } else return false;\n        } catch (e) {\n            return false\n        }\n    },\n\n    async CheckAuthorize() {\n        try {\n            const resp = await fetch('http://192.168.0.7:8080/api/auth/authorize.php', {\n                method: 'GET',\n                headers: {\n                    'Access-Control-Allow-Origin':'*'\n                },\n                credentials: 'include'\n            }).then(data => data.json()).catch(null)\n            if (resp !== null) {\n                if (resp['CODE'] === 'OK') {\n                    return resp['DATA']\n                } else return null\n            } else return null\n        } catch (e) {\n            return null\n        }\n    },\n\n    isAuthorized(AuthorizedState) {\n        if (!AuthorizedState) {\n            if (window.location.pathname !== '/') window.location.href = '/'\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}