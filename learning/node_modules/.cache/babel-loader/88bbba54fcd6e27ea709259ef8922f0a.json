{"ast":null,"code":"var _jsxFileName = \"/Users/michalratajewski/edupage/files/learning/src/utilis/ProtectedRoute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Route, Navigate } from \"react-router-dom\";\nimport authorize from \"./authorize\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProtectedRoute = _ref => {\n  _s();\n\n  let {\n    children,\n    ...rest\n  } = _ref;\n  const [data, setDate] = useState({\n    Logged: false,\n    user_data: null,\n    checked: false\n  });\n  const status = authorize.CheckAuthorize().then(data => {\n    if (data !== null) return /*#__PURE__*/React.cloneElement(children, {\n      User_data: data\n    });else {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        replace: true,\n        to: '/'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }, this);\n    }\n  }).catch(() => {\n    setDate();\n  });\n\n  if (data.checked) {\n    if (data.Logged) {} else {}\n  } else return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Autoryzacja w toku\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 20\n  }, this);\n};\n\n_s(ProtectedRoute, \"H3YzJnigeJnVKl4M+aImKOg8Evw=\");\n\n_c = ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["/Users/michalratajewski/edupage/files/learning/src/utilis/ProtectedRoute.js"],"names":["React","useState","Route","Navigate","authorize","ProtectedRoute","children","rest","data","setDate","Logged","user_data","checked","status","CheckAuthorize","then","cloneElement","User_data","catch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,kBAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,OAAO,MAAMC,cAAc,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAACC,IAAAA,QAAD;AAAW,OAAGC;AAAd,GAAwB;AAEnD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC;AAACS,IAAAA,MAAM,EAAE,KAAT;AAAgBC,IAAAA,SAAS,EAAE,IAA3B;AAAiCC,IAAAA,OAAO,EAAE;AAA1C,GAAD,CAAhC;AAEC,QAAMC,MAAM,GAAGT,SAAS,CAACU,cAAV,GAA2BC,IAA3B,CACZP,IAAI,IAAI;AACJ,QAAIA,IAAI,KAAK,IAAb,EAAmB,oBAAQR,KAAK,CAACgB,YAAN,CAAmBV,QAAnB,EAA6B;AAACW,MAAAA,SAAS,EAAGT;AAAb,KAA7B,CAAR,CAAnB,KACK;AACD,0BACI,QAAC,QAAD;AAAU,QAAA,OAAO,MAAjB;AAAkB,QAAA,EAAE,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;AACJ,GARW,EASdU,KATc,CASR,MAAM;AACVT,IAAAA,OAAO;AACV,GAXe,CAAf;;AAaD,MAAID,IAAI,CAACI,OAAT,EAAkB;AACd,QAAIJ,IAAI,CAACE,MAAT,EAAiB,CAEhB,CAFD,MAEO,CAEN;AACJ,GAND,MAMO,oBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACV,CAxBM;;GAAML,c;;KAAAA,c","sourcesContent":["import React, {useState} from \"react\";\nimport {Route, Navigate} from \"react-router-dom\";\nimport authorize from \"./authorize\";\n\nexport const ProtectedRoute = ({children, ...rest}) => {\n\n    const [data, setDate] = useState({Logged: false, user_data: null, checked: false})\n\n     const status = authorize.CheckAuthorize().then(\n        data => {\n            if (data !== null) return (React.cloneElement(children, {User_data : data}))\n            else {\n                return (\n                    <Navigate replace to={'/'}/>\n                )\n            }\n        }\n    ).catch(() => {\n        setDate()\n    })\n\n    if (data.checked) {\n        if (data.Logged) {\n\n        } else {\n\n        }\n    } else return (<h1>Autoryzacja w toku</h1>)\n}"]},"metadata":{},"sourceType":"module"}